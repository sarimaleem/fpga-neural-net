|neuralnet
gpio_pin[0] => bytes.DATAB
gpio_pin[0] => bytes.DATAB
gpio_pin[0] => bytes.DATAB
gpio_pin[0] => bytes.DATAB
gpio_pin[1] => bytes.DATAB
gpio_pin[1] => bytes.DATAB
gpio_pin[1] => bytes.DATAB
gpio_pin[1] => bytes.DATAB
gpio_pin[2] => bytes.DATAB
gpio_pin[2] => bytes.DATAB
gpio_pin[2] => bytes.DATAB
gpio_pin[2] => bytes.DATAB
gpio_pin[3] => bytes.DATAB
gpio_pin[3] => bytes.DATAB
gpio_pin[3] => bytes.DATAB
gpio_pin[3] => bytes.DATAB
gpio_pin[4] => bytes.DATAB
gpio_pin[4] => bytes.DATAB
gpio_pin[4] => bytes.DATAB
gpio_pin[4] => bytes.DATAB
gpio_pin[5] => bytes.DATAB
gpio_pin[5] => bytes.DATAB
gpio_pin[5] => bytes.DATAB
gpio_pin[5] => bytes.DATAB
gpio_pin[6] => ~NO_FANOUT~
gpio_pin[7] => ~NO_FANOUT~
pi_clk => bytes[3][0].CLK
pi_clk => bytes[3][1].CLK
pi_clk => bytes[3][2].CLK
pi_clk => bytes[3][3].CLK
pi_clk => bytes[3][4].CLK
pi_clk => bytes[3][5].CLK
pi_clk => bytes[2][0].CLK
pi_clk => bytes[2][1].CLK
pi_clk => bytes[2][2].CLK
pi_clk => bytes[2][3].CLK
pi_clk => bytes[2][4].CLK
pi_clk => bytes[2][5].CLK
pi_clk => bytes[1][0].CLK
pi_clk => bytes[1][1].CLK
pi_clk => bytes[1][2].CLK
pi_clk => bytes[1][3].CLK
pi_clk => bytes[1][4].CLK
pi_clk => bytes[1][5].CLK
pi_clk => bytes[0][0].CLK
pi_clk => bytes[0][1].CLK
pi_clk => bytes[0][2].CLK
pi_clk => bytes[0][3].CLK
pi_clk => bytes[0][4].CLK
pi_clk => bytes[0][5].CLK
pi_clk => count[0].CLK
pi_clk => count[1].CLK
rst_n => bytes[3][0].ACLR
rst_n => bytes[3][1].ACLR
rst_n => bytes[3][2].ACLR
rst_n => bytes[3][3].ACLR
rst_n => bytes[3][4].ACLR
rst_n => bytes[3][5].ACLR
rst_n => bytes[2][0].ACLR
rst_n => bytes[2][1].ACLR
rst_n => bytes[2][2].ACLR
rst_n => bytes[2][3].ACLR
rst_n => bytes[2][4].ACLR
rst_n => bytes[2][5].ACLR
rst_n => bytes[1][0].ACLR
rst_n => bytes[1][1].ACLR
rst_n => bytes[1][2].ACLR
rst_n => bytes[1][3].ACLR
rst_n => bytes[1][4].ACLR
rst_n => bytes[1][5].ACLR
rst_n => bytes[0][0].ACLR
rst_n => bytes[0][1].ACLR
rst_n => bytes[0][2].ACLR
rst_n => bytes[0][3].ACLR
rst_n => bytes[0][4].ACLR
rst_n => bytes[0][5].ACLR
rst_n => count[0].ACLR
rst_n => count[1].ACLR
write_enable => count[1].ENA
write_enable => count[0].ENA
write_enable => bytes[0][5].ENA
write_enable => bytes[0][4].ENA
write_enable => bytes[0][3].ENA
write_enable => bytes[0][2].ENA
write_enable => bytes[0][1].ENA
write_enable => bytes[0][0].ENA
write_enable => bytes[1][5].ENA
write_enable => bytes[1][4].ENA
write_enable => bytes[1][3].ENA
write_enable => bytes[1][2].ENA
write_enable => bytes[1][1].ENA
write_enable => bytes[3][0].ENA
write_enable => bytes[1][0].ENA
write_enable => bytes[2][5].ENA
write_enable => bytes[2][4].ENA
write_enable => bytes[2][3].ENA
write_enable => bytes[2][2].ENA
write_enable => bytes[2][1].ENA
write_enable => bytes[2][0].ENA
write_enable => bytes[3][5].ENA
write_enable => bytes[3][4].ENA
write_enable => bytes[3][3].ENA
write_enable => bytes[3][2].ENA
write_enable => bytes[3][1].ENA
buttons[0] => Mux0.IN1
buttons[0] => Mux1.IN1
buttons[0] => Mux2.IN1
buttons[0] => Mux3.IN1
buttons[0] => Mux4.IN1
buttons[0] => Mux5.IN1
buttons[1] => Mux0.IN0
buttons[1] => Mux1.IN0
buttons[1] => Mux2.IN0
buttons[1] => Mux3.IN0
buttons[1] => Mux4.IN0
buttons[1] => Mux5.IN0
LED[0] << Mux5.DB_MAX_OUTPUT_PORT_TYPE
LED[1] << Mux4.DB_MAX_OUTPUT_PORT_TYPE
LED[2] << Mux3.DB_MAX_OUTPUT_PORT_TYPE
LED[3] << Mux2.DB_MAX_OUTPUT_PORT_TYPE
LED[4] << Mux1.DB_MAX_OUTPUT_PORT_TYPE
LED[5] << Mux0.DB_MAX_OUTPUT_PORT_TYPE


